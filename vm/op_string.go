// Code generated by "stringer -type=Op -trimprefix=Op"; DO NOT EDIT.

package vm

import "strconv"

func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[op_arith_start-0]
	_ = x[OpAdd-1]
	_ = x[OpSub-2]
	_ = x[OpMul-3]
	_ = x[OpDiv-4]
	_ = x[OpMod-5]
	_ = x[OpNeg-6]
	_ = x[op_arith_end-7]
	_ = x[op_logic_start-8]
	_ = x[OpEq-9]
	_ = x[OpNE-10]
	_ = x[OpGT-11]
	_ = x[OpLT-12]
	_ = x[OpGTE-13]
	_ = x[OpLTE-14]
	_ = x[OpNot-15]
	_ = x[OpAnd-16]
	_ = x[OpOr-17]
	_ = x[op_logic_end-18]
	_ = x[OpPrint-19]
	_ = x[OpJmp-20]
	_ = x[OpJF-21]
	_ = x[OpCall-22]
	_ = x[OpRet-23]
	_ = x[OpPush-24]
	_ = x[OpDup-25]
	_ = x[OpLoad-26]
	_ = x[OpStore-27]
	_ = x[OpLoadPtr-28]
	_ = x[OpLoadFromPtr-29]
	_ = x[OpStoreToPtr-30]
}

const _Op_name = "op_arith_startAddSubMulDivModNegop_arith_endop_logic_startEqNEGTLTGTELTENotAndOrop_logic_endPrintJmpJFCallRetPushDupLoadStoreLoadPtrLoadFromPtrStoreToPtr"

var _Op_index = [...]uint8{0, 14, 17, 20, 23, 26, 29, 32, 44, 58, 60, 62, 64, 66, 69, 72, 75, 78, 80, 92, 97, 100, 102, 106, 109, 113, 116, 120, 125, 132, 143, 153}

func (i Op) String() string {
	if i >= Op(len(_Op_index)-1) {
		return "Op(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _Op_name[_Op_index[i]:_Op_index[i+1]]
}
