// Code generated by go2go; DO NOT EDIT.


//line stack.go2:1
package vm

//line stack.go2:1
import "errors"

//line stack.go2:8
type Ptr = int

//line stack.go2:11
type Frame struct {
	RetAddr Ptr
}

var StackOverflow = errors.New("stack overflow")

//line stack.go2:18
type VMStack instantiate୦୦Stack୦uint

//line stack.go2:22
type FrameStack instantiate୦୦Stack୦vm୮aFrame

//line stack.go2:31
func NewVMStack(cap int) *instantiate୦୦Stack୦uint {
	return instantiate୦୦NewStack୦uint(cap)
}

//line stack.go2:36
func NewFrameStack(cap int) *instantiate୦୦Stack୦vm୮aFrame {
	return instantiate୦୦NewStack୦vm୮aFrame(cap)
}

//line stack.go2:38
type instantiate୦୦Stack୦uint struct {
//line stack.go2:25
 inner []uint

//line stack.go2:26
 top int
			cap int
}

//line stack.go2:52
func (s *instantiate୦୦Stack୦uint,) Push(v uint,

//line stack.go2:52
) {
	if s.top == s.cap {
		panic(StackOverflow)
	}
	s.inner = append(s.inner, v)
	s.top++
}

//line stack.go2:62
func (s *instantiate୦୦Stack୦uint,) Pop() uint {
	return s.PopN(1)
}

//line stack.go2:68
func (s *instantiate୦୦Stack୦uint,) PopN(n int) uint {
	if s.top < n {
		panic(StackOverflow)
	}
	s.top -= n
	return s.inner[s.top]
}

//line stack.go2:74
type instantiate୦୦Stack୦vm୮aFrame struct {
//line stack.go2:25
 inner []Frame

//line stack.go2:26
 top int
			cap int
}

//line stack.go2:52
func (s *instantiate୦୦Stack୦vm୮aFrame,) Push(v Frame,

//line stack.go2:52
) {
	if s.top == s.cap {
		panic(StackOverflow)
	}
	s.inner = append(s.inner, v)
	s.top++
}

//line stack.go2:62
func (s *instantiate୦୦Stack୦vm୮aFrame,) Pop() Frame {
	return s.PopN(1)
}

//line stack.go2:68
func (s *instantiate୦୦Stack୦vm୮aFrame,) PopN(n int) Frame {
	if s.top < n {
		panic(StackOverflow)
	}
	s.top -= n
	return s.inner[s.top]
}
//line stack.go2:42
func instantiate୦୦NewStack୦uint(cap int) *instantiate୦୦Stack୦uint {
	return &instantiate୦୦Stack୦uint{
		inner: make([]uint, 0, cap>>2),
		top:   0,
		cap:   cap,
	}
}
//line stack.go2:42
func instantiate୦୦NewStack୦vm୮aFrame(cap int) *instantiate୦୦Stack୦vm୮aFrame {
	return &instantiate୦୦Stack୦vm୮aFrame{
		inner: make([]Frame, 0, cap>>2),
		top:   0,
		cap:   cap,
	}
}

//line stack.go2:48
type Importable୦ int

//line stack.go2:48
var _ = errors.As
